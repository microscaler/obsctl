name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v0.1.0)'
        required: true
        type: string

env:
  CARGO_TERM_COLOR: always

jobs:
  # Lint and code quality checks
  lint:
    name: Lint and Code Quality
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Cache Cargo dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: lint-${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          lint-${{ runner.os }}-cargo-

    - name: Check code formatting
      run: cargo fmt -- --check

    - name: Run Clippy lints
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Check for security vulnerabilities
      run: |
        cargo install cargo-audit
        cargo audit

    - name: Validate Cargo.toml and Cargo.lock
      run: |
        cargo check --locked
        cargo verify-project

    - name: Check documentation
      run: cargo doc --no-deps --document-private-items

  # Build matrix for all supported platforms
  build:
    name: Build ${{ matrix.platform }}
    runs-on: ${{ matrix.os }}
    needs: lint  # Build only runs after lint passes
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux builds
          - platform: linux-x64
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            cross: false
          - platform: linux-arm64
            os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            cross: true
          - platform: linux-armv7
            os: ubuntu-latest
            target: armv7-unknown-linux-gnueabihf
            cross: true
          
          # macOS builds (for Universal Binary)
          - platform: macos-intel
            os: macos-latest
            target: x86_64-apple-darwin
            cross: false
          - platform: macos-arm64
            os: macos-latest
            target: aarch64-apple-darwin
            cross: false
          
          # Windows build
          - platform: windows-x64
            os: windows-latest
            target: x86_64-pc-windows-gnu
            cross: false

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install cross-compilation tools
      if: matrix.cross
      run: |
        cargo install cross --git https://github.com/cross-rs/cross

    - name: Cache Cargo dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-${{ matrix.target }}-
          ${{ runner.os }}-cargo-

    - name: Build binary
      run: |
        if [ "${{ matrix.cross }}" = "true" ]; then
          cross build --release --target ${{ matrix.target }}
        else
          cargo build --release --target ${{ matrix.target }}
        fi
      shell: bash

    - name: Prepare release files
      run: |
        # Create release directory
        mkdir -p release/${{ matrix.platform }}
        
        # Copy binary (handle Windows .exe extension)
        if [ "${{ matrix.platform }}" = "windows-x64" ]; then
          cp target/${{ matrix.target }}/release/obsctl.exe release/${{ matrix.platform }}/
        else
          cp target/${{ matrix.target }}/release/obsctl release/${{ matrix.platform }}/
        fi
        
        # Copy additional files
        cp README.md release/${{ matrix.platform }}/
        cp packaging/obsctl.1 release/${{ matrix.platform }}/
        cp packaging/obsctl.bash-completion release/${{ matrix.platform }}/
        
        # Copy dashboard files
        mkdir -p release/${{ matrix.platform }}/dashboards
        cp packaging/dashboards/*.json release/${{ matrix.platform }}/dashboards/
      shell: bash

    - name: Create platform archive
      run: |
        cd release
        if [ "${{ matrix.platform }}" = "windows-x64" ]; then
          # Create ZIP for Windows
          if command -v powershell >/dev/null 2>&1; then
            powershell Compress-Archive -Path ${{ matrix.platform }} -DestinationPath obsctl-\${{ github.ref_name }}-${{ matrix.platform }}.zip
          else
            zip -r obsctl-${{ github.ref_name }}-${{ matrix.platform }}.zip ${{ matrix.platform }}/
          fi
        else
          # Create tar.gz for Unix-like systems
          tar -czf obsctl-${{ github.ref_name }}-${{ matrix.platform }}.tar.gz ${{ matrix.platform }}/
        fi
      shell: bash

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: obsctl-${{ matrix.platform }}
        path: release/obsctl-${{ github.ref_name }}-${{ matrix.platform }}.*
        retention-days: 7

  # Create macOS Universal Binary
  universal-binary:
    name: Create macOS Universal Binary
    runs-on: macos-latest
    needs: build
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download macOS artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: obsctl-macos-*
        merge-multiple: true

    - name: Create Universal Binary
      run: |
        # Extract both macOS builds
        tar -xzf obsctl-${{ github.ref_name }}-macos-intel.tar.gz
        tar -xzf obsctl-${{ github.ref_name }}-macos-arm64.tar.gz
        
        # Create universal directory
        mkdir -p macos-universal
        cp -r macos-intel/* macos-universal/
        
        # Create universal binary using lipo
        lipo -create \
          macos-intel/obsctl \
          macos-arm64/obsctl \
          -output macos-universal/obsctl
        
        # Verify universal binary
        lipo -info macos-universal/obsctl
        
        # Create universal archive
        tar -czf obsctl-${{ github.ref_name }}-macos-universal.tar.gz macos-universal/

    - name: Upload Universal Binary
      uses: actions/upload-artifact@v4
      with:
        name: obsctl-macos-universal
        path: obsctl-${{ github.ref_name }}-macos-universal.tar.gz
        retention-days: 7

  # Create Chocolatey package
  chocolatey-package:
    name: Create Chocolatey Package
    runs-on: windows-latest
    needs: build
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download Windows artifact
      uses: actions/download-artifact@v4
      with:
        name: obsctl-windows-x64

    - name: Create Chocolatey package
      shell: powershell
      run: |
        # Calculate checksum
        $checksum = (Get-FileHash "obsctl-${{ github.ref_name }}-windows-x64.zip" -Algorithm SHA256).Hash
        
        # Create package directory
        New-Item -ItemType Directory -Path "chocolatey" -Force
        New-Item -ItemType Directory -Path "chocolatey/tools" -Force
        New-Item -ItemType Directory -Path "chocolatey/legal" -Force
        
        # Process templates
        $version = "${{ github.ref_name }}".TrimStart('v')
        $year = (Get-Date).Year
        
        # Create nuspec from template
        if (Test-Path "packaging/chocolatey/obsctl.nuspec.template") {
          $nuspec = Get-Content "packaging/chocolatey/obsctl.nuspec.template" -Raw
          $nuspec = $nuspec -replace '\{\{VERSION\}\}', $version
          $nuspec = $nuspec -replace '\{\{YEAR\}\}', $year
          $nuspec | Out-File "chocolatey/obsctl.nuspec" -Encoding UTF8
        }
        
        # Create install script from template
        if (Test-Path "packaging/chocolatey/chocolateyinstall.ps1.template") {
          $install = Get-Content "packaging/chocolatey/chocolateyinstall.ps1.template" -Raw
          $install = $install -replace '\{\{VERSION\}\}', $version
          $install = $install -replace '\{\{CHECKSUM\}\}', $checksum.ToLower()
          $install | Out-File "chocolatey/tools/chocolateyinstall.ps1" -Encoding UTF8
        }
        
        # Copy uninstall script
        if (Test-Path "packaging/chocolatey/chocolateyuninstall.ps1.template") {
          Copy-Item "packaging/chocolatey/chocolateyuninstall.ps1.template" "chocolatey/tools/chocolateyuninstall.ps1"
        }
        
        # Create verification file
        $verification = @"
        VERIFICATION
        Package can be verified by downloading:
        x64: https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/obsctl-${{ github.ref_name }}-windows-x64.zip
        
        Checksum: $($checksum.ToLower())
        "@
        $verification | Out-File "chocolatey/legal/VERIFICATION.txt" -Encoding UTF8
        
        Write-Host "Chocolatey package structure created successfully"
        Write-Host "Checksum: $($checksum.ToLower())"

    - name: Upload Chocolatey package files
      uses: actions/upload-artifact@v4
      with:
        name: chocolatey-package
        path: chocolatey/
        retention-days: 7

  # Create GitHub release
  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build, universal-binary, chocolatey-package]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        merge-multiple: true

    - name: Generate release notes
      run: |
        cat > RELEASE_NOTES.md << EOF
        # obsctl ${{ github.ref_name }} Release
        
        ## Platform Support
        
        ### Linux
        - **x64** (Intel/AMD 64-bit) - Most servers and desktops
        - **ARM64** (64-bit ARM) - Modern ARM servers, AWS Graviton
        - **ARMv7** (32-bit ARM) - Raspberry Pi, embedded devices
        
        ### macOS
        - **Universal Binary** - Single binary supports both Intel and Apple Silicon
        
        ### Windows
        - **x64** (Intel/AMD 64-bit) - Standard Windows systems
        
        ## Installation
        
        ### Chocolatey (Windows)
        \`\`\`powershell
        choco install obsctl
        \`\`\`
        
        ### Homebrew (macOS/Linux)
        \`\`\`bash
        brew install obsctl
        \`\`\`
        
        ### Manual Installation
        1. Download the appropriate archive for your platform
        2. Extract and copy to PATH
        3. Configure: \`obsctl config configure\`
        4. Install dashboards: \`obsctl config dashboard install\`
        
        ## Features
        - Complete S3-compatible operations
        - Built-in OpenTelemetry observability
        - Grafana dashboard automation
        - Cross-platform native performance
        - Comprehensive configuration options
        EOF

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        body_path: RELEASE_NOTES.md
        files: |
          *.tar.gz
          *.zip
        draft: false
        prerelease: ${{ contains(github.ref_name, 'alpha') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'rc') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
