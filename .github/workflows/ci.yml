name: CI

on:
  workflow_call:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always

jobs:
  # Pre-commit hooks validation (runs first) - READ ONLY MODE
  pre-commit:
    name: Pre-commit Hooks
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Install cargo-audit
      run: cargo install cargo-audit

    - name: Install pre-commit
      run: pip install pre-commit

    - name: Cache pre-commit
      uses: actions/cache@v4
      with:
        path: ~/.cache/pre-commit
        key: pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}

    - name: Run pre-commit hooks (check-only mode)
      run: |
        # Skip file-modifying hooks in CI, run only validation
        SKIP=trailing-whitespace,end-of-file-fixer pre-commit run --all-files

  # Test on multiple platforms
  test:
    name: Test ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: pre-commit  # Wait for pre-commit to pass
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache Cargo dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Run tests
      run: cargo test --verbose

    - name: Run clippy
      run: cargo clippy -- -D warnings

    - name: Check formatting
      run: cargo fmt -- --check

  # Build test for cross-compilation targets - COMPREHENSIVE PLATFORM SUPPORT
  build-test:
    name: Build Test ${{ matrix.platform }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux builds (AMD64, ARM64, ARMv7)
          - platform: linux-amd64
            target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            native: true
          - platform: linux-arm64
            target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            cross: true
          - platform: linux-armv7
            target: armv7-unknown-linux-gnueabihf
            os: ubuntu-latest
            cross: true

          # macOS builds (Intel, Apple Silicon)
          - platform: macos-amd64
            target: x86_64-apple-darwin
            os: macos-latest
            native: true
          - platform: macos-arm64
            target: aarch64-apple-darwin
            os: macos-latest
            native: true

          # Windows builds (AMD64, ARM64, ARMv7)
          - platform: windows-amd64
            target: x86_64-pc-windows-gnu
            os: ubuntu-latest
            cross: true
          - platform: windows-arm64
            target: aarch64-pc-windows-gnullvm
            os: ubuntu-latest
            cross: true
          - platform: windows-armv7
            target: armv7-pc-windows-gnueabi
            os: ubuntu-latest
            cross: true

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Install target
      run: rustup target add ${{ matrix.target }}

    - name: Install cross-compilation tools
      if: matrix.cross == true
      run: |
        cargo install cross --git https://github.com/cross-rs/cross

    - name: Install native dependencies (cross-compilation)
      if: matrix.cross == true
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          gcc-arm-linux-gnueabihf \
          gcc-aarch64-linux-gnu \
          mingw-w64 \
          gcc-mingw-w64-x86-64 \
          gcc-mingw-w64-i686 \
          cmake \
          pkg-config \
          clang \
          llvm

    - name: Cache Cargo dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ci-${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ci-${{ runner.os }}-${{ matrix.target }}-cargo-
          ci-${{ runner.os }}-cargo-

    - name: Build for target
      run: |
        if [ "${{ matrix.cross }}" = "true" ]; then
          echo "🔧 Cross-compiling for ${{ matrix.target }} on ${{ matrix.platform }}"
          cross build --target ${{ matrix.target }} --release
        else
          echo "🏗️ Native build for ${{ matrix.target }} on ${{ matrix.platform }}"
          cargo build --target ${{ matrix.target }} --release
        fi

        echo "📦 Build completed for platform: ${{ matrix.platform }}"
        echo "🎯 Target: ${{ matrix.target }}"
        ls -la target/${{ matrix.target }}/release/
      shell: bash

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: obsctl-ci-${{ matrix.platform }}
        path: |
          target/${{ matrix.target }}/release/obsctl*
          !target/${{ matrix.target }}/release/obsctl.d

  # Security audit
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Install cargo-audit
      run: cargo install cargo-audit

    - name: Run security audit
      run: cargo audit

  # Check packaging templates
  packaging-check:
    name: Packaging Check
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check Chocolatey templates
      run: |
        echo "Checking Chocolatey templates..."
        if [ -f "packaging/chocolatey/obsctl.nuspec.template" ]; then
          echo "✓ Chocolatey nuspec template found"
        else
          echo "✗ Chocolatey nuspec template missing"
          exit 1
        fi

        if [ -f "packaging/chocolatey/chocolateyinstall.ps1.template" ]; then
          echo "✓ Chocolatey install template found"
        else
          echo "✗ Chocolatey install template missing"
          exit 1
        fi

        if [ -f "packaging/chocolatey/chocolateyuninstall.ps1.template" ]; then
          echo "✓ Chocolatey uninstall template found"
        else
          echo "✗ Chocolatey uninstall template missing"
          exit 1
        fi

    - name: Check Homebrew formula
      run: |
        echo "Checking Homebrew formula..."
        if [ -f "packaging/homebrew/obsctl.rb" ]; then
          echo "✓ Homebrew formula found"
        else
          echo "✗ Homebrew formula missing"
          exit 1
        fi

    - name: Check Debian packaging
      run: |
        echo "Checking Debian packaging files..."
        if [ -f "packaging/debian/control" ]; then
          echo "✓ Debian control file found"
        else
          echo "✗ Debian control file missing"
          exit 1
        fi

        if [ -f "packaging/debian/postinst" ]; then
          echo "✓ Debian postinst script found"
        else
          echo "✗ Debian postinst script missing"
          exit 1
        fi

    - name: Check man page and completion
      run: |
        echo "Checking documentation files..."
        if [ -f "packaging/obsctl.1" ]; then
          echo "✓ Man page found"
        else
          echo "✗ Man page missing"
          exit 1
        fi

        if [ -f "packaging/obsctl.bash-completion" ]; then
          echo "✓ Bash completion found"
        else
          echo "✗ Bash completion missing"
          exit 1
        fi

    - name: Check dashboard files
      run: |
        echo "Checking dashboard files..."
        if [ -d "packaging/dashboards" ]; then
          dashboard_count=$(ls packaging/dashboards/*.json 2>/dev/null | wc -l)
          if [ "$dashboard_count" -gt 0 ]; then
            echo "✓ Dashboard files found ($dashboard_count files)"
          else
            echo "✗ No dashboard JSON files found"
            exit 1
          fi
        else
          echo "✗ Dashboard directory missing"
          exit 1
        fi

  # Integration test simulation
  integration-test:
    name: Integration Test Simulation
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Build obsctl
      run: cargo build --release

    - name: Test basic functionality
      run: |
        # Test help command
        ./target/release/obsctl --help

        # Test version command
        ./target/release/obsctl --version

        # Test config help
        ./target/release/obsctl config --help

        # Test dashboard help
        ./target/release/obsctl config dashboard --help

    - name: Test configuration examples
      run: |
        # Test config examples (should not fail)
        ./target/release/obsctl config --example || true
        ./target/release/obsctl config --env || true
        ./target/release/obsctl config --otel || true

  # Documentation check
  docs-check:
    name: Documentation Check
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check README
      run: |
        if [ -f "README.md" ]; then
          echo "✓ README.md found"
          # Check for key sections
          if grep -q "Installation" README.md; then
            echo "✓ Installation section found"
          else
            echo "⚠ Installation section missing from README"
          fi
        else
          echo "✗ README.md missing"
          exit 1
        fi

    - name: Check documentation consistency
      run: |
        echo "Checking documentation consistency..."

        # Check if Chocolatey is mentioned in README
        if grep -q -i "chocolatey\|choco" README.md; then
          echo "✓ Chocolatey installation mentioned in README"
        else
          echo "⚠ Chocolatey installation not mentioned in README"
        fi

        # Check if Homebrew is mentioned
        if grep -q -i "homebrew\|brew" README.md; then
          echo "✓ Homebrew installation mentioned in README"
        else
          echo "⚠ Homebrew installation not mentioned in README"
        fi
