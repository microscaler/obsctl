name: Conventional Commits Validation

on:
  workflow_call:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  conventional-commits:
    name: Validate Conventional Commits
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # Fetch full history for conventional commit validation
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install commitizen
        run: |
          pip install commitizen

      - name: Validate commit messages (Push)
        if: github.event_name == 'push'
        run: |
          echo "üîç Validating commit messages for push event..."

          # Get the range of commits to check
          if [ "${{ github.event.before }}" = "0000000000000000000000000000000000000000" ]; then
            # New branch, check only the latest commit
            COMMITS="${{ github.sha }}"
          else
            # Existing branch, check commits since last push
            COMMITS="${{ github.event.before }}..${{ github.sha }}"
          fi

          echo "Checking commits in range: $COMMITS"

          # Validate each commit in the range
          for commit in $(git rev-list $COMMITS); do
            echo "Validating commit: $commit"
            git log --format="%H %s" -n 1 $commit

            # Get commit message
            commit_msg=$(git log --format="%s" -n 1 $commit)

            # Skip merge commits (they have different format requirements)
            if echo "$commit_msg" | grep -qE '^Merge (pull request|branch)'; then
              echo "‚è≠Ô∏è  SKIPPED: Merge commit detected, skipping validation"
              continue
            fi

            # Skip GitHub PR merge commits (e.g., "Advanced filtering (#4)")
            if echo "$commit_msg" | grep -qE '.+ \(#[0-9]+\)$'; then
              echo "‚è≠Ô∏è  SKIPPED: GitHub PR merge commit detected, skipping validation"
              continue
            fi

            # Check if commit message follows conventional format
            if ! echo "$commit_msg" | grep -qE '^(feat|fix|docs|style|refactor|perf|test|chore|ci|build|revert)(\(.+\))?!?:'; then
              echo "‚ùå FAILED: Commit $commit does not follow conventional commit format"
              echo "   Message: $commit_msg"
              echo ""
              echo "üìã Conventional commit format: <type>[optional scope]: <description>"
              echo "   Types: feat, fix, docs, style, refactor, perf, test, chore, ci, build, revert"
              echo "   Example: feat(cli): add new dashboard command"
              exit 1
            else
              echo "‚úÖ PASSED: Commit $commit follows conventional format"
            fi
          done

      - name: Validate commit messages (Pull Request)
        if: github.event_name == 'pull_request'
        run: |
          echo "üîç Validating commit messages for pull request..."

          # Get all commits in the PR
          COMMITS="${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }}"

          echo "Checking commits in PR range: $COMMITS"

          # Validate each commit in the PR
          for commit in $(git rev-list $COMMITS); do
            echo "Validating commit: $commit"
            git log --format="%H %s" -n 1 $commit

            # Get commit message
            commit_msg=$(git log --format="%s" -n 1 $commit)

            # Skip merge commits (they have different format requirements)
            if echo "$commit_msg" | grep -qE '^Merge (pull request|branch)'; then
              echo "‚è≠Ô∏è  SKIPPED: Merge commit detected, skipping validation"
              continue
            fi

            # Skip GitHub PR merge commits
            if echo "$commit_msg" | grep -qE '.+ \(#[0-9]+\)$'; then
              echo "‚è≠Ô∏è  SKIPPED: GitHub PR merge commit detected, skipping validation"
              continue
            fi

            # Check if commit message follows conventional format
            if ! echo "$commit_msg" | grep -qE '^(feat|fix|docs|style|refactor|perf|test|chore|ci|build|revert)(\(.+\))?!?:'; then
              echo "‚ùå FAILED: Commit $commit does not follow conventional commit format"
              echo "   Message: $commit_msg"
              echo ""
              echo "üìã Conventional commit format: <type>[optional scope]: <description>"
              echo "   Types: feat, fix, docs, style, refactor, perf, test, chore, ci, build, revert"
              echo "   Example: feat(cli): add new dashboard command"
              exit 1
            else
              echo "‚úÖ PASSED: Commit $commit follows conventional format"
            fi
          done

      - name: Validate PR title (Pull Request)
        if: github.event_name == 'pull_request'
        run: |
          echo "üîç Validating pull request title..."

          pr_title="${{ github.event.pull_request.title }}"
          echo "PR Title: $pr_title"

          # More flexible PR title validation - allow descriptive titles
          # Check if PR title follows conventional format OR is a descriptive title
          if echo "$pr_title" | grep -qE '^(feat|fix|docs|style|refactor|perf|test|chore|ci|build|revert)(\(.+\))?!?:'; then
            echo "‚úÖ PASSED: PR title follows conventional format"
          elif echo "$pr_title" | grep -qE '^[üöÄüîßüéØüìäüîçüõ†Ô∏èüí°‚ö°üé®üìà]'; then
            echo "‚úÖ PASSED: PR title uses emoji prefix (acceptable for major features)"
          else
            echo "‚ö†Ô∏è  WARNING: PR title doesn't follow conventional format, but this is acceptable for PRs"
            echo "   Title: $pr_title"
            echo ""
            echo "üí° Recommended format: <type>[optional scope]: <description>"
            echo "   Types: feat, fix, docs, style, refactor, perf, test, chore, ci, build, revert"
            echo "   Example: feat(cli): add new dashboard command"
          fi

      - name: Success message
        run: |
          echo "üéâ Commit message validation completed!"
          echo ""
          echo "üìã Conventional Commit Format:"
          echo "   <type>[optional scope]: <description>"
          echo ""
          echo "üè∑Ô∏è  Available types:"
          echo "   feat:     A new feature"
          echo "   fix:      A bug fix"
          echo "   docs:     Documentation only changes"
          echo "   style:    Code style changes (formatting, etc.)"
          echo "   refactor: Code changes that neither fix bugs nor add features"
          echo "   perf:     Performance improvements"
          echo "   test:     Adding or correcting tests"
          echo "   chore:    Maintenance tasks"
          echo "   ci:       CI configuration changes"
          echo "   build:    Build system changes"
          echo "   revert:   Reverts a previous commit"
          echo ""
          echo "üéØ Optional scopes: api, cli, otel, config, packaging, ci, docs, tests"
