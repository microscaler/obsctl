name: Release Please - Unified Release Pipeline

on:
  push:
    branches:
      - main
      - master

permissions:
  contents: write
  pull-requests: write

env:
  CARGO_TERM_COLOR: always

jobs:
  # Release Please - Create release PRs and releases
  release-please:
    runs-on: ubuntu-latest
    outputs:
      release_created: ${{ steps.release.outputs.release_created }}
      tag_name: ${{ steps.release.outputs.tag_name }}
      version: ${{ steps.release.outputs.version }}
      major: ${{ steps.release.outputs.major }}
      minor: ${{ steps.release.outputs.minor }}
      patch: ${{ steps.release.outputs.patch }}
    steps:
      - name: Release Please
        uses: googleapis/release-please-action@v4
        id: release
        with:
          config-file: .github/release-please-config.json
          manifest-file: .github/.release-please-manifest.json

  # Release Configuration Tests - Run when release is created
  release-config-tests:
    needs: release-please
    if: needs.release-please.outputs.release_created
    runs-on: ubuntu-latest
    timeout-minutes: 45
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable

      - name: Cache Rust dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: config-test-${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Build obsctl
        run: |
          cargo build --release
          ls -la target/release/obsctl

      - name: Setup CI services with Docker Compose
        run: |
          echo "🚀 Starting CI services for release configuration tests..."
          docker compose --env-file docker-compose.ci.env up -d minio otel-collector
          echo "📋 Running CI services:"
          docker compose ps

      - name: Wait for services to be ready
        run: |
          echo "🔄 Waiting for MinIO to be ready..."
          timeout 120 bash -c 'until curl -f http://localhost:9000/minio/health/live; do sleep 3; done'
          echo "✅ MinIO is ready"

          echo "🔄 Waiting for OTEL Collector to be ready..."
          timeout 60 bash -c 'until curl -f http://localhost:8888/metrics; do sleep 2; done'
          echo "✅ OTEL Collector is ready"

      - name: Setup test environment
        run: |
          # Install MinIO client
          wget https://dl.min.io/client/mc/release/linux-amd64/mc
          chmod +x mc
          sudo mv mc /usr/local/bin/

          # Configure MinIO client
          mc alias set local http://localhost:9000 minioadmin minioadmin123
          mc admin info local

          # Create test AWS config directory
          mkdir -p ~/.aws

          # Set up test configurations
          cat > ~/.aws/credentials << EOF
          [default]
          aws_access_key_id = minioadmin
          aws_secret_access_key = minioadmin123
          EOF

          cat > ~/.aws/config << EOF
          [default]
          region = us-east-1
          endpoint_url = http://localhost:9000
          output = json
          EOF

          cat > ~/.aws/otel << EOF
          [otel]
          enabled = true
          endpoint = http://localhost:4317
          service_name = obsctl-release-test
          EOF

      - name: Run Release Configuration Tests
        env:
          AWS_ENDPOINT_URL: http://localhost:9000
          AWS_ACCESS_KEY_ID: minioadmin
          AWS_SECRET_ACCESS_KEY: minioadmin123
          AWS_DEFAULT_REGION: us-east-1
          OTEL_EXPORTER_OTLP_ENDPOINT: http://localhost:4317
          OTEL_SERVICE_NAME: obsctl-release-test
        run: |
          echo "🚀 Running comprehensive release configuration tests..."
          python3 tests/release_config_tests.py --category all --workers 2 --timeout 1800

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: release-config-test-results
          path: release_config_test_report.json
          retention-days: 30

      - name: Cleanup services
        if: always()
        run: |
          mc rm --recursive --force local/ || true
          docker compose --env-file docker-compose.ci.env down -v --remove-orphans
          docker system prune -f

  # Lint and code quality checks
  lint:
    needs: [release-please, release-config-tests]
    if: needs.release-please.outputs.release_created
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Cache Cargo dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: lint-${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Check code formatting
      run: cargo fmt -- --check

    - name: Run Clippy lints
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Check for security vulnerabilities
      run: |
        cargo install cargo-audit
        cargo audit

  # Multi-platform builds with cross-compilation
  build:
    needs: [release-please, release-config-tests, lint]
    if: needs.release-please.outputs.release_created
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux builds (aligned with CI fixes)
          - platform: linux-x64
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            native: true
          - platform: linux-arm64
            os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            cross: true
          - platform: linux-armv7
            os: ubuntu-latest
            target: armv7-unknown-linux-gnueabihf
            cross: true

          # macOS builds (native on macOS runners)
          - platform: macos-intel
            os: macos-latest
            target: x86_64-apple-darwin
            native: true
          - platform: macos-arm64
            os: macos-latest
            target: aarch64-apple-darwin
            native: true

          # Windows build (cross-compilation from Ubuntu)
          - platform: windows-x64
            os: ubuntu-latest
            target: x86_64-pc-windows-gnu
            cross: true

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Install target
      run: rustup target add ${{ matrix.target }}

    - name: Install cross-compilation tools
      if: matrix.cross == true
      run: |
        cargo install cross --git https://github.com/cross-rs/cross

    - name: Install native dependencies (Linux cross-compilation)
      if: matrix.os == 'ubuntu-latest' && matrix.cross == true
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          gcc-arm-linux-gnueabihf \
          gcc-aarch64-linux-gnu \
          mingw-w64 \
          cmake \
          pkg-config

    - name: Cache Cargo dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.target }}-cargo-
          ${{ runner.os }}-cargo-

    - name: Build binary
      run: |
        if [ "${{ matrix.cross }}" = "true" ]; then
          echo "Cross-compiling for ${{ matrix.target }}"
          cross build --target ${{ matrix.target }} --release
        else
          echo "Native build for ${{ matrix.target }}"
          cargo build --target ${{ matrix.target }} --release
        fi
      shell: bash

    - name: Prepare release directory
      run: |
        mkdir -p release/${{ matrix.platform }}

        # Copy binary with correct extension
        if [ "${{ matrix.platform }}" = "windows-x64" ]; then
          cp target/${{ matrix.target }}/release/obsctl.exe release/${{ matrix.platform }}/
        else
          cp target/${{ matrix.target }}/release/obsctl release/${{ matrix.platform }}/
        fi

        # Copy documentation and support files
        cp README.md release/${{ matrix.platform }}/
        cp LICENSE release/${{ matrix.platform }}/ || cp LICENSE.md release/${{ matrix.platform }}/ || echo "No LICENSE file found"
        cp packaging/obsctl.1 release/${{ matrix.platform }}/
        cp packaging/obsctl.bash-completion release/${{ matrix.platform }}/

        # Copy dashboard files
        mkdir -p release/${{ matrix.platform }}/dashboards
        cp packaging/dashboards/*.json release/${{ matrix.platform }}/dashboards/

        # Platform-specific packaging files
        if [ "${{ matrix.platform }}" = "linux-x64" ] || [ "${{ matrix.platform }}" = "linux-arm64" ] || [ "${{ matrix.platform }}" = "linux-armv7" ]; then
          mkdir -p release/${{ matrix.platform }}/debian
          cp packaging/debian/* release/${{ matrix.platform }}/debian/ 2>/dev/null || true
        fi
      shell: bash

    - name: Create platform archive
      run: |
        cd release
        if [ "${{ matrix.platform }}" = "windows-x64" ]; then
          zip -r obsctl-${{ needs.release-please.outputs.tag_name }}-${{ matrix.platform }}.zip ${{ matrix.platform }}/
        else
          tar -czf obsctl-${{ needs.release-please.outputs.tag_name }}-${{ matrix.platform }}.tar.gz ${{ matrix.platform }}/
        fi
      shell: bash

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: obsctl-${{ matrix.platform }}
        path: release/obsctl-${{ needs.release-please.outputs.tag_name }}-${{ matrix.platform }}.*
        retention-days: 7

  # Create macOS Universal Binary
  universal-binary:
    needs: [release-please, build]
    if: needs.release-please.outputs.release_created
    runs-on: macos-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download macOS artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: obsctl-macos-*
        merge-multiple: true

    - name: Create Universal Binary
      run: |
        # Extract the macOS binaries
        tar -xzf obsctl-${{ needs.release-please.outputs.tag_name }}-macos-intel.tar.gz
        tar -xzf obsctl-${{ needs.release-please.outputs.tag_name }}-macos-arm64.tar.gz

        # Create universal binary directory
        mkdir -p release/macos-universal

        # Use lipo to create universal binary
        lipo -create \
          macos-intel/obsctl \
          macos-arm64/obsctl \
          -output release/macos-universal/obsctl

        # Copy support files
        cp macos-intel/README.md release/macos-universal/
        cp macos-intel/LICENSE* release/macos-universal/ 2>/dev/null || true
        cp macos-intel/obsctl.1 release/macos-universal/
        cp macos-intel/obsctl.bash-completion release/macos-universal/
        cp -r macos-intel/dashboards release/macos-universal/

        # Verify universal binary
        file release/macos-universal/obsctl
        lipo -info release/macos-universal/obsctl

    - name: Create Universal Binary archive
      run: |
        cd release
        tar -czf obsctl-${{ needs.release-please.outputs.tag_name }}-macos-universal.tar.gz macos-universal/

    - name: Upload Universal Binary
      uses: actions/upload-artifact@v4
      with:
        name: obsctl-macos-universal
        path: release/obsctl-${{ needs.release-please.outputs.tag_name }}-macos-universal.tar.gz
        retention-days: 7

  # Create Debian packages for Linux platforms
  debian-packages:
    needs: [release-please, build]
    if: needs.release-please.outputs.release_created
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - platform: linux-x64
            arch: amd64
          - platform: linux-arm64
            arch: arm64
          - platform: linux-armv7
            arch: armhf
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download Linux artifacts
      uses: actions/download-artifact@v4
      with:
        name: obsctl-${{ matrix.platform }}

    - name: Install packaging tools
      run: |
        sudo apt-get update
        sudo apt-get install -y dpkg-dev fakeroot

    - name: Create Debian package
      run: |
        # Extract the platform archive
        tar -xzf obsctl-${{ needs.release-please.outputs.tag_name }}-${{ matrix.platform }}.tar.gz

        # Create Debian package structure
        mkdir -p obsctl-deb/DEBIAN
        mkdir -p obsctl-deb/usr/bin
        mkdir -p obsctl-deb/usr/share/man/man1
        mkdir -p obsctl-deb/usr/share/bash-completion/completions
        mkdir -p obsctl-deb/usr/share/obsctl/dashboards

        # Copy files
        cp ${{ matrix.platform }}/obsctl obsctl-deb/usr/bin/
        cp ${{ matrix.platform }}/obsctl.1 obsctl-deb/usr/share/man/man1/
        cp ${{ matrix.platform }}/obsctl.bash-completion obsctl-deb/usr/share/bash-completion/completions/obsctl
        cp ${{ matrix.platform }}/dashboards/*.json obsctl-deb/usr/share/obsctl/dashboards/

        # Create control file
        VERSION=$(echo "${{ needs.release-please.outputs.tag_name }}" | sed 's/^v//')
        cat > obsctl-deb/DEBIAN/control << EOF
        Package: obsctl
        Version: ${VERSION}
        Section: utils
        Priority: optional
        Architecture: ${{ matrix.arch }}
        Maintainer: obsctl Team <team@obsctl.io>
        Description: High-performance S3-compatible CLI tool with OpenTelemetry observability
         Enterprise-grade S3-compatible CLI tool with advanced filtering, pattern matching,
         and comprehensive OpenTelemetry observability integration.
        EOF

        # Copy postinst and prerm scripts if they exist
        if [ -f "packaging/debian/postinst" ]; then
          cp packaging/debian/postinst obsctl-deb/DEBIAN/
          chmod 755 obsctl-deb/DEBIAN/postinst
        fi

        if [ -f "packaging/debian/prerm" ]; then
          cp packaging/debian/prerm obsctl-deb/DEBIAN/
          chmod 755 obsctl-deb/DEBIAN/prerm
        fi

        # Set permissions
        chmod 755 obsctl-deb/usr/bin/obsctl

        # Build package
        fakeroot dpkg-deb --build obsctl-deb obsctl-${VERSION}-${{ matrix.arch }}.deb

    - name: Upload Debian package
      uses: actions/upload-artifact@v4
      with:
        name: obsctl-debian-${{ matrix.arch }}
        path: obsctl-*.deb
        retention-days: 7

  # Create Chocolatey package for Windows
  chocolatey-package:
    needs: [release-please, build]
    if: needs.release-please.outputs.release_created
    runs-on: windows-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download Windows artifact
      uses: actions/download-artifact@v4
      with:
        name: obsctl-windows-x64

    - name: Create Chocolatey package
      run: |
        # Create package structure
        New-Item -ItemType Directory -Force -Path "chocolatey"
        New-Item -ItemType Directory -Force -Path "chocolatey/tools"
        New-Item -ItemType Directory -Force -Path "chocolatey/legal"

        # Extract Windows binary
        Expand-Archive -Path "obsctl-${{ needs.release-please.outputs.tag_name }}-windows-x64.zip" -DestinationPath "."

        # Calculate checksum for verification
        $checksum = (Get-FileHash "obsctl-${{ needs.release-please.outputs.tag_name }}-windows-x64.zip" -Algorithm SHA256).Hash

        # Get version without 'v' prefix
        $version = "${{ needs.release-please.outputs.tag_name }}" -replace '^v', ''
        $year = Get-Date -Format "yyyy"

        # Create nuspec from template
        if (Test-Path "packaging/chocolatey/obsctl.nuspec.template") {
          $nuspec = Get-Content "packaging/chocolatey/obsctl.nuspec.template" -Raw
          $nuspec = $nuspec -replace '\{\{VERSION\}\}', $version
          $nuspec = $nuspec -replace '\{\{YEAR\}\}', $year
          $nuspec | Out-File "chocolatey/obsctl.nuspec" -Encoding UTF8
        }

        # Create install script from template
        if (Test-Path "packaging/chocolatey/chocolateyinstall.ps1.template") {
          $install = Get-Content "packaging/chocolatey/chocolateyinstall.ps1.template" -Raw
          $install = $install -replace '\{\{VERSION\}\}', $version
          $install = $install -replace '\{\{CHECKSUM\}\}', $checksum.ToLower()
          $install | Out-File "chocolatey/tools/chocolateyinstall.ps1" -Encoding UTF8
        }

        # Copy uninstall script
        if (Test-Path "packaging/chocolatey/chocolateyuninstall.ps1.template") {
          Copy-Item "packaging/chocolatey/chocolateyuninstall.ps1.template" "chocolatey/tools/chocolateyuninstall.ps1"
        }

        # Create verification file
        $verification = @"
        VERIFICATION
        Package can be verified by downloading:
        x64: https://github.com/${{ github.repository }}/releases/download/${{ needs.release-please.outputs.tag_name }}/obsctl-${{ needs.release-please.outputs.tag_name }}-windows-x64.zip

        Checksum: $($checksum.ToLower())
        "@
        $verification | Out-File "chocolatey/legal/VERIFICATION.txt" -Encoding UTF8

    - name: Upload Chocolatey package files
      uses: actions/upload-artifact@v4
      with:
        name: chocolatey-package
        path: chocolatey/
        retention-days: 7

  # Create GitHub release with all artifacts
  github-release:
    needs: [release-please, release-config-tests, build, universal-binary, debian-packages, chocolatey-package]
    if: needs.release-please.outputs.release_created
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        merge-multiple: true

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ needs.release-please.outputs.tag_name }}
        name: Release ${{ needs.release-please.outputs.tag_name }}
        body: |
          ## 🚀 obsctl ${{ needs.release-please.outputs.tag_name }}

          Enterprise-grade S3-compatible CLI tool with advanced filtering, pattern matching, and OpenTelemetry observability.

          ### 📦 Downloads

          #### Binaries
          - **Linux x64**: `obsctl-${{ needs.release-please.outputs.tag_name }}-linux-x64.tar.gz`
          - **Linux ARM64**: `obsctl-${{ needs.release-please.outputs.tag_name }}-linux-arm64.tar.gz`
          - **Linux ARMv7**: `obsctl-${{ needs.release-please.outputs.tag_name }}-linux-armv7.tar.gz`
          - **Windows x64**: `obsctl-${{ needs.release-please.outputs.tag_name }}-windows-x64.zip`
          - **macOS Universal**: `obsctl-${{ needs.release-please.outputs.tag_name }}-macos-universal.tar.gz`

          #### Package Managers
          - **Debian/Ubuntu**: `obsctl-*-amd64.deb`, `obsctl-*-arm64.deb`, `obsctl-*-armhf.deb`
          - **Chocolatey**: See chocolatey-package artifact

          ### 🔧 Installation

          ```bash
          # Linux/macOS (extract and copy to PATH)
          tar -xzf obsctl-${{ needs.release-please.outputs.tag_name }}-linux-x64.tar.gz
          sudo cp linux-x64/obsctl /usr/local/bin/

          # Debian/Ubuntu
          sudo dpkg -i obsctl-*-amd64.deb

          # Windows (Chocolatey - coming soon)
          # choco install obsctl
          ```

          ### ✨ Features
          - 🔍 Advanced filtering with 11 CLI flags
          - 🎨 Intelligent pattern matching (wildcards + regex)
          - 📊 Complete OpenTelemetry observability
          - 🛠️ Universal S3 compatibility
          - 🚀 Cross-platform support (6 architectures)

          ### ✅ Quality Assurance
          - ✅ Release configuration tests passed
          - ✅ Cross-platform builds validated
          - ✅ Security audit completed
          - ✅ All 6 target platforms supported
        files: |
          obsctl-${{ needs.release-please.outputs.tag_name }}-*.tar.gz
          obsctl-${{ needs.release-please.outputs.tag_name }}-*.zip
          obsctl-*.deb
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
