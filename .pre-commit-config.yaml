# Pre-commit hooks for obsctl - Essential quality gates
repos:
  # Basic file checks (only run locally to prevent CI modifications)
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      - id: trailing-whitespace
        exclude: '\.md$'
        stages: [pre-commit]  # Only run locally
      - id: end-of-file-fixer
        exclude: '\.md$'
        stages: [pre-commit]  # Only run locally
      - id: check-yaml
        args: ['--unsafe']
      - id: check-toml
      - id: check-json
      - id: check-merge-conflict
      - id: check-added-large-files
        args: ['--maxkb=500']

  # Conventional commits enforcement
  - repo: https://github.com/compilerla/conventional-pre-commit
    rev: v3.0.0
    hooks:
      - id: conventional-pre-commit
        stages: [commit-msg]
        args: ["feat", "fix", "docs", "style", "refactor", "perf", "test", "chore", "ci", "build", "revert"]

  # Rust-specific hooks (essential only)
  - repo: local
    hooks:
      - id: cargo-fmt
        name: Cargo Format Check
        entry: cargo fmt --all -- --check
        language: system
        types: [rust]
        pass_filenames: false

      # AUTO-FIX CLIPPY ISSUES THEN STRICT CHECK - ZERO WARNINGS ALLOWED
      - id: cargo-clippy-auto-fix-strict
        name: Cargo Clippy Auto-Fix + Strict Check
        entry: |
          bash -c '
          echo "üîß Auto-fixing clippy issues...";
          ./scripts/fix-clippy.sh;
          echo "‚úÖ Auto-fixes applied";
          echo "üîç Checking for remaining unfixable issues...";
          output=$(cargo clippy --all-targets --all-features -- -D warnings 2>&1);
          if [ $? -ne 0 ]; then
            echo "$output";
            echo "‚ùå COMMIT BLOCKED: Unfixable clippy warnings/errors detected!";
            echo "üõ†Ô∏è  Manual fixes required for remaining issues! The regression is likely due to a new clippy lint. Please keep the codebase hygenic!";
            exit 1;
          else
            echo "‚úÖ All clippy issues resolved!";
          fi
          '
        language: system
        types: [rust]
        pass_filenames: false

      # Regular compilation check
      - id: cargo-check
        name: Cargo Check Compilation
        entry: cargo check --all-targets --all-features
        language: system
        types: [rust]
        pass_filenames: false

# Global configuration
default_stages: [pre-commit]
fail_fast: false
minimum_pre_commit_version: "3.0.0"
