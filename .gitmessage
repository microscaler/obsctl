# <type>[optional scope]: <description>
#
# [optional body]
#
# [optional footer(s)]

# --- CONVENTIONAL COMMIT TYPES ---
# feat:     A new feature
# fix:      A bug fix
# docs:     Documentation only changes
# style:    Changes that do not affect the meaning of the code (white-space, formatting, etc)
# refactor: A code change that neither fixes a bug nor adds a feature
# perf:     A code change that improves performance
# test:     Adding missing tests or correcting existing tests
# chore:    Changes to the build process or auxiliary tools and libraries
# ci:       Changes to CI configuration files and scripts
# build:    Changes that affect the build system or external dependencies
# revert:   Reverts a previous commit

# --- OPTIONAL SCOPES ---
# api, cli, otel, config, packaging, ci, docs, tests

# --- EXAMPLES ---
# feat(cli): add new dashboard command with list and install options
# fix(otel): resolve memory leak in metrics collection
# docs: update README with installation instructions
# ci(github): add pre-commit hooks to workflow
# chore(deps): bump aws-sdk-s3 to v1.94.0
# BREAKING CHANGE: remove deprecated upload command

# --- BREAKING CHANGES ---
# Use "BREAKING CHANGE:" in the footer or add "!" after type/scope
# feat!: remove deprecated upload command
# feat(api)!: change configuration file format

# --- RULES ---
# - Use imperative mood ("add" not "added" or "adds")
# - Don't capitalize first letter of description
# - No period at the end of description
# - Body and footer are optional
# - Reference issues: "Closes #123"
